name: check-version-changed-rust
description: Checks if the version has changed since last release
author: 'radumarias'
branding:
  icon: activity
  color: black

inputs:
#  type:
#    description: The project language, currently only `rust` is supported
#    required: true
#    type: string
    since_commit:
      description: 'Last commit hash from which we should search'
      required: true
outputs:
  changed:
    description: 'If the version has changed (type: bool)'
    value: ${{ steps.check_version.outputs.changed }}
  version:
    description: 'The current value in version file (type: string)'
    value: ${{ steps.check_version.outputs.new_version }}
  prev_version:
    description: 'The previous version (type: string)'
    value: ${{ steps.check_version.outputs.old_version }}

runs:
  using: 'composite'
  steps:
#    - name: Check type
#      if: ${{ !contains(fromJson('["rust"]'), inputs.type)  }}
#      run: exit 1      
      
    - id: check_version
      run: |
        get_old_version_from_commit() {
          commit=$1
          git show ${commit} Cargo.toml | grep '^-version\s*=' | sed 's/^-version\s*=\s*"\(.*\)"/\1/'
        }
        
        find_old_version() {
          last_commit_checked_for_version_change=${{ inputs.since_commit }}
          echo "last_commit_checked_for_version_change $last_commit_checked_for_version_change" >&2
          if [ -n "$last_commit_checked_for_version_change" ]; then
            # we have last commit
            echo "Search since commit" >&2
            git fetch
            commits_since=$(git log $last_commit_checked_for_version_change..HEAD --pretty=format:"%H")
            if [ -z "$commits_since" ]; then
              return 0
            fi
            echo "commits_since $commits_since"  >&2
            commit_array=("${(@f)commits_since}")
            for commit_hash in "${commit_array[@]}"; do
              echo "commit_hash $commit_hash"  >&2
              old_version="$(get_old_version_from_commit $commit_hash)"
              if [ -n "$old_version" ]; then
                echo "$old_version"
                return 0
              fi
            done              
          else
            # we DON"T have last commit, take last tag
            echo "Search last tag" >&2
            git fetch --tags
            git fetch --prune --unshallow || true
            last_tag=$( git describe --abbrev=0 --tags | sed 's/^v//' )
            echo $last_tag
          fi
        }
        
        new_version=$( grep '^version\s*=' Cargo.toml | sed 's/version\s*=\s*"\(.*\)"/\1/' | sed 's/^version\s*=\s*//' )
        old_version=$(find_old_version)
        old_version=${old_version:-$new_version}
        
        echo "Old Version: $old_version"
        echo "New Version: $new_version"
        
        if [ "$old_version" != "$new_version" ]; then
          echo "Version has changed from $old_version to $new_version"
          echo "changed=true" >> "$GITHUB_OUTPUT"
        else
          echo "Version has not changed"
          echo "changed=false" >> "$GITHUB_OUTPUT"
        fi
        echo "old_version=$old_version" >> "$GITHUB_OUTPUT"
        echo "new_version=$new_version" >> "$GITHUB_OUTPUT"
      shell: bash